{{- /*gotype: github.com/paynejacob/hotcereal/pkg/providergen.Resource*/ -}}
func (p *{{ .Name }}Provider) Delete(objs ...*{{ .Name }}) error {
    p.mu.Lock()

    var keys []store.Key

    for _, obj := range objs {
        keys = append(keys,
            p.ObjectKey(obj),
        {{- range .LazyFields }}
            p.FieldKey(obj, "{{ .Name }}"),
        {{- end }}
        )
    }

    // delete from the persistence layer
    if err := p.Store.Delete(keys...); err != nil {
        p.mu.Unlock()
        return err
    }

    for _, obj := range objs {
        // ensure the fields match the stored fields
        obj = p.Get(obj.{{ .KeyField.Name }})

        // cleanup lookups
        {{- range .LookupFields }}
        {{- if .IsArray }}
        for _, v := range obj.{{ .Name }} {
            delete(p.lookup{{.Name}}, v)
        }
        {{- else }}
        delete(p.lookup{{.Name}}, obj.{{ .Name }})
        {{- end }}
        {{- end }}

        delete(p.cache, obj.{{ .KeyField.Name }})
        p.searchIndex.Delete(obj.{{ .KeyField.Name }})
    }



    p.mu.Unlock()
    return nil
}
